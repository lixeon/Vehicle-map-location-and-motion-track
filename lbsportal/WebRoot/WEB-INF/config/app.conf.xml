<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p" 
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:task="http://www.springframework.org/schema/task"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task-3.0.xsd">

    <!-- Load Jdbc Properties -->
    <context:property-placeholder location="WEB-INF/config/jdbc.properties,WEB-INF/config/portal.server.properties"/>
    
    <!-- enable the configuration of TASK based on annotations -->
    <task:executor id="task_executor" pool-size="2" />
    <task:scheduler id="task_scheduler" pool-size="3" />  
    <task:annotation-driven executor="task_executor" scheduler="task_scheduler" />  
    
    <!-- enable the configuration of transactional behavior based on annotations 
    -->
  	<tx:annotation-driven transaction-manager="txManager"/>
    
    
    <!-- datasource -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
    	<property name="driverClassName" value="${jdbc.driverclass}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="5" /> 
        <property name="maxActive" value="30" />

        <!-- 配置获取连接等待超时的时间 
        <property name="maxWait" value="60000" />
        -->
     
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        -->
     
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒
        <property name="minEvictableIdleTimeMillis" value="300000" />
      
        -->
        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <!--
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
         -->
     
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
        -->
     
        <!-- 配置监控统计拦截的filters 
        <property name="filters" value="stat" />
        -->
    </bean>

    <!-- transaction manager begin... -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 
    <bean id="txInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <property name="transactionManager" ref="txManager" />
        <property name="transactionAttributes">
            <props>
                <prop key="get*">PROPAGATION_REQUIRED, readOnly</prop>
                <prop key="select*">PROPAGATION_REQUIRED, readOnly</prop>
                <prop key="query*">PROPAGATION_REQUIRED, readOnly</prop>
                <prop key="find*">PROPAGATION_REQUIRED, readOnly</prop>
                <prop key="load*">PROPAGATION_REQUIRED, readOnly</prop>
                <prop key="read*">PROPAGATION_REQUIRED, readOnly</prop>
                <prop key="fetch*">PROPAGATION_REQUIRED, readOnly</prop>
                <prop key="*">PROPAGATION_REQUIRED</prop>
            </props>
        </property>
    </bean>
    <bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="beanNames">
            <value>*Service,*Dao</value>
        </property>
        <property name="interceptorNames">
            <list>
                <value>txInterceptor</value>
            </list>
        </property>
    </bean>
     -->
    <!-- transaction manager end. -->

    <!-- JDBC Template  -->
    <bean id="global_jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- NamedParameterJdbcTemplate -->
    <bean id="global_namedParameterJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
        <constructor-arg>
        	<ref bean="global_jdbcTemplate" />
        </constructor-arg>
    </bean>

    <!-- base DAO Support -->
    <bean id="base_daoSupportEx" class="com.app.platform.base.dao.DaoSupportEx">
        <property name="jdbcTemplate" ref="global_jdbcTemplate" />
        <property name="namedJdbcTemplate" ref="global_namedParameterJdbcTemplate" />
    </bean>

    <!-- Common DAO extend -->
    <bean id="common_commonDaoEx" class="com.app.lbs.common.dao.CommonDaoEx" parent="base_daoSupportEx">
    </bean>

</beans>
